<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linuxes on LAEO</title><link>https://laeo.github.io/linux/</link><description>Recent content in Linuxes on LAEO</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Tue, 07 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://laeo.github.io/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>基于WireGuard虚拟局域网组建k3s集群</title><link>https://laeo.github.io/linux/%E5%9F%BA%E4%BA%8Ewireguard%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91%E7%BB%84%E5%BB%BAk3s%E9%9B%86%E7%BE%A4/</link><pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate><guid>https://laeo.github.io/linux/%E5%9F%BA%E4%BA%8Ewireguard%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91%E7%BB%84%E5%BB%BAk3s%E9%9B%86%E7%BE%A4/</guid><description>&lt;p>上一篇文章记录了在VPS上通过 WireGuard 组建虚拟局域网的过程，也提到是在为搭建k3s集群做准备，这两天总算是搞定了 &lt;code>Longhorn&lt;/code> 存储系统的问题，可以把搭建的流程以及所需的 YAML 文件都贴出来，也方便以后再用到时查找。&lt;/p>
&lt;h2 id="k3s">k3s&lt;/h2>
&lt;p>&lt;code>k3s&lt;/code> (官网是 &lt;a href="https://k3s.io">k3s.io&lt;/a>)是一个精简版本的 Kubernetes(k8s)，也是用于实现容器编排与管理功能，但它更加轻量，精简了许多复杂的内容，却能达到与k8s差不多的功能。官网上写着 “The certified Kubernetes distribution built for IoT &amp;amp; Edge computing”，但是个人项目或者小型项目也是可以用用的，比较相对于k8s所需的硬件配置，它的需求简直不值一提。&lt;/p>
&lt;h2 id="环境初始化">环境初始化&lt;/h2>
&lt;ul>
&lt;li>VPC: 阿里云国际站 轻量服务器 新加坡节点 2C2G80G30M&lt;/li>
&lt;li>OS: CentOS 7 with kernel 5.7&lt;/li>
&lt;/ul>
&lt;p>配置好 WireGuard 后，根据 Rancher 官方文档中的 &lt;a href="https://rancher2.docs.rancher.cn/docs/best-practices/optimize/os/_index/">节点调优&lt;/a> 小节，处理系统参数的优化、打开流量转发等工作。&lt;/p>
&lt;h2 id="安装记录">安装记录&lt;/h2>
&lt;p>根据官方文档的说明，安装主控节点，个人使用不考虑主控的高可用，单主即可。然后添加被控，参数改改就行，非常简单。&lt;/p>
&lt;h3 id="主控">主控&lt;/h3>
&lt;p>由于我此次使用了阿里云的VPC，又通过WireGuard进行了虚拟组网，因此需要设置部分初始化参数，以兼容当前环境。最终调整后的结果如下所示&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -sfL https://get.k3s.io | sh -s - --node-label &lt;span style="color:#00688b">region&lt;/span>=sg --node-external-ip 149.172.63.24 --advertise-address 149.172.63.24 --disable traefik --node-ip 10.20.30.1 --flannel-iface wg0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>解释下上述参数的作用&lt;/p>
&lt;ul>
&lt;li>&lt;code>--node-label region=sg&lt;/code> 为节点打上region标签，这样在创建部署时，就可以根据业务需要，调整Pod或其它资源分布的节点。&lt;/li>
&lt;li>&lt;code>--node-external-ip 149.172.63.24&lt;/code> 为节点设置外部IP，阿里云VPC的外网IP并未直接绑定到虚拟机网卡上，所以我要设置这个参数，避免k3s组件在设置loadbalance时，将内网IP当作公网IP使用。&lt;/li>
&lt;li>&lt;code>--advertise-address 149.172.63.24&lt;/code> 用于设置kubectl工具以及子节点进行通讯使用的地址，可以是IP，也可以是域名，在创建apiserver证书时会将此设置到有效域中。&lt;/li>
&lt;li>&lt;code>--disable traefik&lt;/code> k3s自带Ingress组件 Traefik，但是并不好用，我使用后无法正常生成 ACME 免费证书，所以禁用它，换成 ingress-nginx 与 certmanager 的组合。&lt;/li>
&lt;li>&lt;code>--node-ip 10.20.30.1&lt;/code> 如果不设置这个参数，那么第一张网卡设备上的IP就会被选中，所以这个IP常是内网IP。但我自行组建了虚拟局域网，所以需要指定虚拟局域网的IP（也就是WireGuard的IP）。&lt;/li>
&lt;li>&lt;code>--flannel-iface wg0&lt;/code> wg0是WireGuard创建的网卡设备，我需要使用虚拟局域网来进行节点间的通信，所以这里需要指定为wg0。&lt;/li>
&lt;/ul>
&lt;p>另外就是，由于WireGuard的所有流量都是加密传输的，通过它来进行节点间的通信，就已经能够保证通信安全，也就没有必要改用其它的CNI驱动，使用默认的就可以了。&lt;/p></description></item><item><title>使用WireGuard搭建对等网络通道</title><link>https://laeo.github.io/linux/%E4%BD%BF%E7%94%A8wireguard%E6%90%AD%E5%BB%BA%E5%AF%B9%E7%AD%89%E7%BD%91%E7%BB%9C%E9%80%9A%E9%81%93/</link><pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate><guid>https://laeo.github.io/linux/%E4%BD%BF%E7%94%A8wireguard%E6%90%AD%E5%BB%BA%E5%AF%B9%E7%AD%89%E7%BD%91%E7%BB%9C%E9%80%9A%E9%81%93/</guid><description>&lt;p>由于阿里云国际站停止了新手套餐2.0的续费，导致我自建的代码仓库、持续集成、容器镜像存储与代理等系统，全部需要迁移到轻量服务器上。之前是用 Docker Swarm 作为容器编排工具，这次正好换成 Kubernetes 的简化版——k3s。&lt;/p>
&lt;p>由于轻量服务器内网是不互通的，为了便于以后增加服务器、扩容资源啥的，就试着用 WireGuard 来进行组网。它轻量、便捷、高效，而且数据全程加密传输，是依托公网组建虚拟局域网的优秀选择。&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>安装流程非常简单，目前是可以参照官网的&lt;a href="https://www.wireguard.com/install/">安装指南&lt;/a>进行安装，也可以选择更新系统内核，它已经被合并到内核中了。&lt;/p>
&lt;p>我这里是直接将 CentOS 内核更新到目前最新的 5.7 版本，其中就已经包含了 WireGuard 的内核模块，只需要安装 &lt;code>wireguard-tools&lt;/code> 这个 yum 包就行了。&lt;/p>
&lt;h2 id="配置">配置&lt;/h2>
&lt;p>&lt;code>wireguard-tools&lt;/code> 包提供了我们所需的工具 &lt;code>wg&lt;/code> 和 &lt;code>wg-quick&lt;/code> ，可以使用它们来分别完成手动部署和自动部署。&lt;/p>
&lt;p>先按照官方文档描述的形式，生成好 &lt;em>主机A&lt;/em> 用于加密解密的密钥，其实就只需一行命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wg genkey | tee privatekey | wg pubkey &amp;gt; publickey
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样在当前目录下就生成了 &lt;code>privatekey&lt;/code> 和 &lt;code>publickey&lt;/code> 两个文件，其中密钥是配置到本机的，而公钥是配置到其它机器里的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cat privatekey &amp;amp;&amp;amp; cat publickey
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00688b">6TpHfNWc2H2NuM6ajQMMLkUWTgCf3xlwTTCiayz7Jmo&lt;/span>=
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00688b">kUWTgCf3xlwTTCiayz7Jmo6TpHfNWc2H2NuM6ajQMML&lt;/span>=
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>假如现在有一台需要与上述主机对等联网的 &lt;em>主机B&lt;/em>，其公网IP（或者内网IP，只要能与上述主机通信即可）是 172.17.3.1，我们首先依照上面的流程安装 WireGuard 并生成好主机B的密钥。&lt;/p>
&lt;p>然后编写 &lt;em>主机A&lt;/em> 完整的配置文件，以供 &lt;code>wg-quick&lt;/code> 使用，在主机A的 &lt;code>/etc/wireguard/wg0.conf&lt;/code> 中写入&lt;/p>
&lt;pre tabindex="0">&lt;code>[Interface]
PrivateKey = 6TpHfNWc2H2NuM6ajQMMLkUWTgCf3xlwTTCiayz7Jmo=
Address = 10.0.0.1
ListenPort = 51820

[Peer]
PublicKey = 主机B的publickey
EndPoint = 172.17.3.1:51820
AllowedIPs = 10.0.0.2/32
&lt;/code>&lt;/pre>&lt;p>及其简单的配置了，一看就懂。Interface 小节是属于主机A（也就是本机）的配置，其中 &lt;code>Address&lt;/code> 是你给这台主机分配的虚拟IP，而 &lt;code>ListenPort&lt;/code> 是主机之间通讯使用的端口，是 &lt;em>UDP&lt;/em> 协议的。&lt;/p></description></item><item><title>nginx-proxy将证书应用到非HTTPS容器问题处理记录</title><link>https://laeo.github.io/linux/nginx-proxy%E5%B0%86%E8%AF%81%E4%B9%A6%E5%BA%94%E7%94%A8%E5%88%B0%E9%9D%9Ehttps%E5%AE%B9%E5%99%A8%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E8%AE%B0%E5%BD%95/</link><pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate><guid>https://laeo.github.io/linux/nginx-proxy%E5%B0%86%E8%AF%81%E4%B9%A6%E5%BA%94%E7%94%A8%E5%88%B0%E9%9D%9Ehttps%E5%AE%B9%E5%99%A8%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E8%AE%B0%E5%BD%95/</guid><description>&lt;h2 id="问题描述">问题描述&lt;/h2>
&lt;p>某台 ECS 实例之前就以 docker + nginx-proxy + letsencrypt-nginx-proxy-companion 的形式托管了数个 WEB 服务，但是因为前端挂了 CDN 的缘故，都没有做证书配置等操作。这次由于将另外一台服务器的 gitea 代码管理服务迁移过来，考虑到要提供 SSH 协议的代码克隆服务，故前端没有使用 CDN，而是通过 let&amp;rsquo;s encrypt 组件自动申请的证书来配置 HTTPS。&lt;/p>
&lt;p>然而在配置完整个环境并完成数据迁移后，gitea 是可以正常以 HTTPS 协议访问了，之前本就存在的服务却全都无法正常访问，浏览器不断跳转以至于警告并自动停止请求。查看了 nginx-proxy 的容器日志，发现请求并没有到达此处，于是就在想是不是 CDN 出了问题。在临时取消了 CDN 接入后，依旧不能正常访问，只不过错误形式由原有的循环跳转变成了连接不安全！&lt;/p>
&lt;p>看了具体错误信息，才发现在取消 CDN 接入后，本该是 HTTP 协议的请求，变成了使用 gitea 容器所用证书的 HTTPS 协议的加密请求。那么就要看看是不是配置错误了……&lt;/p>
&lt;h2 id="探索发现">探索发现&lt;/h2>
&lt;p>反复查看 nginx-proxy 与 letsencrypt-nginx-proxy-companion 的文档，也并没有发觉有使用方式上的问题，在创建 gitea 容器的时候，也只是依照文档说明指定了 &lt;code>VIRTUAL_HOST&lt;/code> &lt;code>VIRTUAL_PORT&lt;/code> &lt;code>LETSENCRYPT_HOST&lt;/code> &lt;code>LETSENCRYPT_EMAIL&lt;/code> 这几个环境变量，并无再多设置。那么为何会有这种情况呢……&lt;/p>
&lt;p>是不是域名的问题？gitea 服务我绑定的域名是 &lt;code>t.cn&lt;/code> (privacy protected)，而其余服务都是该域名的二级域名，是否是该原因导致在 nginx 配置生成过程中，产生了错误的判断？&lt;/p>
&lt;p>终于……文档中出现了这段话 &lt;a href="https://github.com/jwilder/nginx-proxy#wildcard-certificates">wildcard-certificates&lt;/a>：&lt;/p>
&lt;blockquote>
&lt;p>Wildcard certificates and keys should be named after the domain name with a .crt and .key extension. For example VIRTUAL_HOST=foo.bar.com would use cert name bar.com.crt and bar.com.key.&lt;/p></description></item><item><title>阿里云卸载自带监控服务记录</title><link>https://laeo.github.io/linux/%E9%98%BF%E9%87%8C%E4%BA%91%E5%8D%B8%E8%BD%BD%E8%87%AA%E5%B8%A6%E7%9B%91%E6%8E%A7%E6%9C%8D%E5%8A%A1%E8%AE%B0%E5%BD%95/</link><pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate><guid>https://laeo.github.io/linux/%E9%98%BF%E9%87%8C%E4%BA%91%E5%8D%B8%E8%BD%BD%E8%87%AA%E5%B8%A6%E7%9B%91%E6%8E%A7%E6%9C%8D%E5%8A%A1%E8%AE%B0%E5%BD%95/</guid><description>&lt;h2 id="东拼西凑的脚本">东拼西凑的脚本&lt;/h2>
&lt;pre tabindex="0">&lt;code>wget -qO- http://update.aegis.aliyun.com/download/uninstall.sh | bash
wget -qO- http://update.aegis.aliyun.com/download/quartz_uninstall.sh | bash
pkill aliyun-service
rm -fr /etc/init.d/agentwatch /usr/sbin/aliyun-service
rm -rf /usr/local/aegis*
iptables -I INPUT -s 140.205.201.0/28 -j DROP
iptables -I INPUT -s 140.205.201.16/29 -j DROP
iptables -I INPUT -s 140.205.201.32/28 -j DROP
iptables -I INPUT -s 140.205.225.192/29 -j DROP
iptables -I INPUT -s 140.205.225.200/30 -j DROP
iptables -I INPUT -s 140.205.225.184/29 -j DROP
iptables -I INPUT -s 140.205.225.183/32 -j DROP
iptables -I INPUT -s 140.205.225.206/32 -j DROP
iptables -I INPUT -s 140.205.225.205/32 -j DROP
iptables -I INPUT -s 140.205.225.195/32 -j DROP
iptables -I INPUT -s 140.205.225.204/32 -j DROP
/usr/local/cloudmonitor/wrapper/bin/cloudmonitor.sh remove &amp;amp;&amp;amp; \
rm -rf /usr/local/cloudmonitor
&lt;/code>&lt;/pre></description></item><item><title>ARCH安装Plasma桌面环境及美化记录</title><link>https://laeo.github.io/linux/arch%E5%AE%89%E8%A3%85plasma%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83%E5%8F%8A%E7%BE%8E%E5%8C%96%E8%AE%B0%E5%BD%95/</link><pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate><guid>https://laeo.github.io/linux/arch%E5%AE%89%E8%A3%85plasma%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83%E5%8F%8A%E7%BE%8E%E5%8C%96%E8%AE%B0%E5%BD%95/</guid><description>&lt;p>&lt;img src="https://laeo.github.io/static/images/2018-07-25-screenshot.png" alt="screenshot">&lt;/p>
&lt;h2 id="安装-kde-环境">安装 KDE 环境&lt;/h2>
&lt;p>终端下执行 &lt;code>sudo pacman -S plasma-meta&lt;/code> 命令以最小化安装 KDE 环境，然后还有官方推荐的 SDDM 显示管理器，执行 &lt;code>sudo pacman -S sddm&lt;/code> ，然后加入开机启动项中 &lt;code>sudo systemctl enable sddm&lt;/code> ，接着重启电脑即可看到登录窗口了。&lt;/p>
&lt;h2 id="系统设置">系统设置&lt;/h2>
&lt;h3 id="工作空间主题">工作空间主题&lt;/h3>
&lt;p>通过 &lt;code>系统设置&lt;/code> 中 &lt;code>工作空间主题&lt;/code> 子项对桌面环境进行美化。&lt;/p>
&lt;p>首先， &lt;code>观感&lt;/code> 中我选择使用 &lt;code>微风&lt;/code> ；然后， &lt;code>桌面主题&lt;/code> 里通过内置的 &lt;code>获得新主题&lt;/code> 按钮在线下载安装桌面主题 &lt;code>Breeze Transparent Dark&lt;/code> 并启用它；在 &lt;code>光标主题&lt;/code> 中使用工作空间主题相同的 &lt;code>微风&lt;/code> 系列光标主题；最后，在 &lt;code>欢迎屏幕&lt;/code> 中同样使用获得新主题按钮在线安装 &lt;code>Arc Dark&lt;/code> 主题并启用。&lt;/p>
&lt;p>到这里就可以获得一个稍微好看的桌面环境了，不过还不够。&lt;/p>
&lt;h3 id="颜色">颜色&lt;/h3>
&lt;p>这个设置项所设置的颜色，就是系统 UI 框架的各个组件所使用的颜色。我多次调整后，最终选择了 &lt;code>Zion&lt;/code> ，同样可以通过界面中的 &lt;code>获取新方案&lt;/code> 按钮在线安装。&lt;/p>
&lt;h3 id="图标">图标&lt;/h3>
&lt;p>图标的选择，翻来翻去我最后选择了 MacOS 的图标，哈哈哈，不得不说 KDE 真好用，还是可以在线安装，直接搜 macos 然后选择一个匹配的即可。&lt;/p></description></item><item><title>ARCH安装指北</title><link>https://laeo.github.io/linux/arch%E5%AE%89%E8%A3%85%E6%8C%87%E5%8C%97/</link><pubDate>Wed, 13 Jun 2018 00:00:00 +0000</pubDate><guid>https://laeo.github.io/linux/arch%E5%AE%89%E8%A3%85%E6%8C%87%E5%8C%97/</guid><description>&lt;h2 id="制作安装盘">制作安装盘&lt;/h2>
&lt;p>首先去 ARCH 官网 &lt;a href="https://www.archlinux.org/download/">下载&lt;/a> 最新版本的 ISO 镜像文件。&lt;/p>
&lt;p>下载好后，使用启动盘制作工具制作U盘启动盘，制作工具推荐 &lt;a href="https://rufus.ie">rufus&lt;/a>。&lt;/p>
&lt;h2 id="设置安装环境">设置安装环境&lt;/h2>
&lt;p>开机选择 U盘 进行引导，大部分情况下即可正常进入到命令行模式的安装环境了。&lt;/p>
&lt;blockquote>
&lt;p>ARCH 安装环境并没有图形界面，因为安装非常简单。&lt;/p>
&lt;/blockquote>
&lt;p>安装需要联网下载系统依赖包，我这里使用 WIFI 进行联网。&lt;/p>
&lt;p>在终端执行 &lt;code>wifi-menu&lt;/code> 进入简单的图形界面，选择要连接的 WIFI 名称，点击回车后输入密码，稍等片刻即可连接成功。&lt;/p>
&lt;blockquote>
&lt;p>可以使用 &lt;code>ping -c4 www.baidu.com&lt;/code> 确定联网是否成功。&lt;/p>
&lt;/blockquote>
&lt;p>联网成功后，执行 &lt;code>pacman -Syy&lt;/code> 同步包管理数据，然后执行 &lt;code>pacman -S reflector&lt;/code> 安装用于筛选软件源的工具。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>reflector -c CN -l &lt;span style="color:#b452cd">3&lt;/span> --sort=rate -p https --save /etc/pacman.d/mirrorlist
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上述命令用于测试并挑选出下载速率最快的、所属中国区并使用 HTTPS 协议的三个源，并将其写入配置文件中。
如此一来，就不会因为下载速度而影响安装速度了。&lt;/p>
&lt;blockquote>
&lt;p>注意，由于 ARCH 的软件更新非常频繁，各大镜像节点速度的限制，安装时有可能出现找不到软件包的 404 报错，稍候再试即可。&lt;/p>
&lt;/blockquote>
&lt;h2 id="硬盘分区">硬盘分区&lt;/h2>
&lt;p>首先需要查看系统分区信息&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>lsblk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出的内容类似于&lt;/p>
&lt;pre tabindex="0">&lt;code>NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
sda 8:0 0 931.5G 0 disk
└─sda1 8:1 0 931.5G 0 part
nvme0n1 259:0 0 953.9G 0 disk
├─nvme0n1p1 259:1 0 565M 0 part
├─nvme0n1p2 259:2 0 100.6G 0 part
├─nvme0n1p3 259:3 0 101G 0 part
├─nvme0n1p4 259:4 0 750.9G 0 part
└─nvme0n1p5 259:5 0 1003M 0 part
&lt;/code>&lt;/pre>&lt;p>我系统的分区如上， &lt;code>nvme0n1p1&lt;/code> 是 &lt;code>UEFI&lt;/code> 分区， &lt;code>nvme0n1p2&lt;/code> 是 WIN10 所在分区， &lt;code>nvme0n1p3&lt;/code> 将用于安装 ARCH， &lt;code>nvme0n1p4&lt;/code> 用于存储数据。&lt;/p></description></item><item><title>深度Linux下SS智能分流</title><link>https://laeo.github.io/linux/%E6%B7%B1%E5%BA%A6linux%E4%B8%8Bss%E6%99%BA%E8%83%BD%E5%88%86%E6%B5%81/</link><pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate><guid>https://laeo.github.io/linux/%E6%B7%B1%E5%BA%A6linux%E4%B8%8Bss%E6%99%BA%E8%83%BD%E5%88%86%E6%B5%81/</guid><description>&lt;h2 id="起因">起因&lt;/h2>
&lt;p>今天在使用 &lt;code>dep&lt;/code> 包管理器接管以前写的一个 Go 语言项目时，突然报错无法下载某个包。仔细检查后，无奈的宣布系统设置的全局代理没起作用。&lt;/p>
&lt;h2 id="处理">处理&lt;/h2>
&lt;p>查了资料，发现可以用 &lt;code>ss-redir&lt;/code> + &lt;code>iptables&lt;/code> + &lt;code>chnroute&lt;/code> 来做智能分流。&lt;/p>
&lt;p>首先，我需要从 &lt;code>shadowsocks-libev&lt;/code> 中取得 &lt;code>ss-redir&lt;/code> 程序，在终端中执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt install shadowsocks-libev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>即可取得我想要的程序，其所在目录为 &lt;code>/usr/bin/ss-redir&lt;/code> 。&lt;/p>
&lt;p>然后，我需要获取所有属于中国的 IP 地址，这个可以从 apnic 网站获得，经搜索后找到如下命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wget -qO- http://ftp.apnic.net/stats/apnic/delegated-apnic-latest | awk -F &lt;span style="color:#cd5555">&amp;#39;|&amp;#39;&lt;/span> &lt;span style="color:#cd5555">&amp;#39;/CN/&amp;amp;&amp;amp;/ipv4/ {print $4 &amp;#34;/&amp;#34; 32-log($5)/log(2)}&amp;#39;&lt;/span> | cat &amp;gt; chnroutes.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>经过过滤处理后的路由列表存放于当前目录，名为 &lt;code>chnroutes.txt&lt;/code> 的文本文件。&lt;/p>
&lt;p>最后，我只需想办法将该路由表导入到 iptables 中，然后将符合规则的数据包转发到 ss-redir 提供的透明代理地址即可。&lt;/p>
&lt;p>经过搜索，我发现可以使用 &lt;code>ipset&lt;/code> 程序来完成这一操作，使用下述命令创建路由集&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ipset -N chnroute hash:net maxelem &lt;span style="color:#b452cd">65536&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后循环将之前路由表中取得的路由添加进去&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> ip in &lt;span style="color:#8b008b;font-weight:bold">$(&lt;/span>cat chnroutes.txt&lt;span style="color:#8b008b;font-weight:bold">)&lt;/span>; &lt;span style="color:#8b008b;font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ipset add chnroute &lt;span style="color:#00688b">$ip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#658b00">echo&lt;/span> &lt;span style="color:#cd5555">&amp;#34;added &lt;/span>&lt;span style="color:#00688b">$ip&lt;/span>&lt;span style="color:#cd5555">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后创建 iptables 规则&lt;/p></description></item></channel></rss>