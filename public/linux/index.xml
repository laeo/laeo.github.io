<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linuxes on LAEO</title>
    <link>http://localhost:1313/linux/</link>
    <description>Recent content in Linuxes on LAEO</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 07 Jul 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于WireGuard虚拟局域网组建k3s集群</title>
      <link>http://localhost:1313/linux/%E5%9F%BA%E4%BA%8Ewireguard%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91%E7%BB%84%E5%BB%BAk3s%E9%9B%86%E7%BE%A4/</link>
      <pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/linux/%E5%9F%BA%E4%BA%8Ewireguard%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91%E7%BB%84%E5%BB%BAk3s%E9%9B%86%E7%BE%A4/</guid>
      <description>&lt;p&gt;上一篇文章记录了在VPS上通过 WireGuard 组建虚拟局域网的过程，也提到是在为搭建k3s集群做准备，这两天总算是搞定了 &lt;code&gt;Longhorn&lt;/code&gt; 存储系统的问题，可以把搭建的流程以及所需的 YAML 文件都贴出来，也方便以后再用到时查找。&lt;/p&gt;&#xA;&lt;h2 id=&#34;k3s&#34;&gt;k3s&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;k3s&lt;/code&gt; (官网是 &lt;a href=&#34;https://k3s.io&#34;&gt;k3s.io&lt;/a&gt;)是一个精简版本的 Kubernetes(k8s)，也是用于实现容器编排与管理功能，但它更加轻量，精简了许多复杂的内容，却能达到与k8s差不多的功能。官网上写着 “The certified Kubernetes distribution built for IoT &amp;amp; Edge computing”，但是个人项目或者小型项目也是可以用用的，比较相对于k8s所需的硬件配置，它的需求简直不值一提。&lt;/p&gt;&#xA;&lt;h2 id=&#34;环境初始化&#34;&gt;环境初始化&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;VPC: 阿里云国际站 轻量服务器 新加坡节点 2C2G80G30M&lt;/li&gt;&#xA;&lt;li&gt;OS: CentOS 7 with kernel 5.7&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;配置好 WireGuard 后，根据 Rancher 官方文档中的 &lt;a href=&#34;https://rancher2.docs.rancher.cn/docs/best-practices/optimize/os/_index/&#34;&gt;节点调优&lt;/a&gt; 小节，处理系统参数的优化、打开流量转发等工作。&lt;/p&gt;&#xA;&lt;h2 id=&#34;安装记录&#34;&gt;安装记录&lt;/h2&gt;&#xA;&lt;p&gt;根据官方文档的说明，安装主控节点，个人使用不考虑主控的高可用，单主即可。然后添加被控，参数改改就行，非常简单。&lt;/p&gt;&#xA;&lt;h3 id=&#34;主控&#34;&gt;主控&lt;/h3&gt;&#xA;&lt;p&gt;由于我此次使用了阿里云的VPC，又通过WireGuard进行了虚拟组网，因此需要设置部分初始化参数，以兼容当前环境。最终调整后的结果如下所示&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -sfL https://get.k3s.io | sh -s - --node-label &lt;span style=&#34;color:#00688b&#34;&gt;region&lt;/span&gt;=sg --node-external-ip 149.172.63.24 --advertise-address 149.172.63.24 --disable traefik --node-ip 10.20.30.1 --flannel-iface wg0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解释下上述参数的作用&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;--node-label region=sg&lt;/code&gt; 为节点打上region标签，这样在创建部署时，就可以根据业务需要，调整Pod或其它资源分布的节点。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;--node-external-ip 149.172.63.24&lt;/code&gt; 为节点设置外部IP，阿里云VPC的外网IP并未直接绑定到虚拟机网卡上，所以我要设置这个参数，避免k3s组件在设置loadbalance时，将内网IP当作公网IP使用。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;--advertise-address 149.172.63.24&lt;/code&gt; 用于设置kubectl工具以及子节点进行通讯使用的地址，可以是IP，也可以是域名，在创建apiserver证书时会将此设置到有效域中。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;--disable traefik&lt;/code&gt; k3s自带Ingress组件 Traefik，但是并不好用，我使用后无法正常生成 ACME 免费证书，所以禁用它，换成 ingress-nginx 与 certmanager 的组合。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;--node-ip 10.20.30.1&lt;/code&gt; 如果不设置这个参数，那么第一张网卡设备上的IP就会被选中，所以这个IP常是内网IP。但我自行组建了虚拟局域网，所以需要指定虚拟局域网的IP（也就是WireGuard的IP）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;--flannel-iface wg0&lt;/code&gt; wg0是WireGuard创建的网卡设备，我需要使用虚拟局域网来进行节点间的通信，所以这里需要指定为wg0。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;另外就是，由于WireGuard的所有流量都是加密传输的，通过它来进行节点间的通信，就已经能够保证通信安全，也就没有必要改用其它的CNI驱动，使用默认的就可以了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用WireGuard搭建对等网络通道</title>
      <link>http://localhost:1313/linux/%E4%BD%BF%E7%94%A8wireguard%E6%90%AD%E5%BB%BA%E5%AF%B9%E7%AD%89%E7%BD%91%E7%BB%9C%E9%80%9A%E9%81%93/</link>
      <pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/linux/%E4%BD%BF%E7%94%A8wireguard%E6%90%AD%E5%BB%BA%E5%AF%B9%E7%AD%89%E7%BD%91%E7%BB%9C%E9%80%9A%E9%81%93/</guid>
      <description>&lt;p&gt;由于阿里云国际站停止了新手套餐2.0的续费，导致我自建的代码仓库、持续集成、容器镜像存储与代理等系统，全部需要迁移到轻量服务器上。之前是用 Docker Swarm 作为容器编排工具，这次正好换成 Kubernetes 的简化版——k3s。&lt;/p&gt;&#xA;&lt;p&gt;由于轻量服务器内网是不互通的，为了便于以后增加服务器、扩容资源啥的，就试着用 WireGuard 来进行组网。它轻量、便捷、高效，而且数据全程加密传输，是依托公网组建虚拟局域网的优秀选择。&lt;/p&gt;&#xA;&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;&#xA;&lt;p&gt;安装流程非常简单，目前是可以参照官网的&lt;a href=&#34;https://www.wireguard.com/install/&#34;&gt;安装指南&lt;/a&gt;进行安装，也可以选择更新系统内核，它已经被合并到内核中了。&lt;/p&gt;&#xA;&lt;p&gt;我这里是直接将 CentOS 内核更新到目前最新的 5.7 版本，其中就已经包含了 WireGuard 的内核模块，只需要安装 &lt;code&gt;wireguard-tools&lt;/code&gt; 这个 yum 包就行了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;wireguard-tools&lt;/code&gt; 包提供了我们所需的工具 &lt;code&gt;wg&lt;/code&gt; 和 &lt;code&gt;wg-quick&lt;/code&gt; ，可以使用它们来分别完成手动部署和自动部署。&lt;/p&gt;&#xA;&lt;p&gt;先按照官方文档描述的形式，生成好 &lt;em&gt;主机A&lt;/em&gt; 用于加密解密的密钥，其实就只需一行命令&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wg genkey | tee privatekey | wg pubkey &amp;gt; publickey&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样在当前目录下就生成了 &lt;code&gt;privatekey&lt;/code&gt; 和 &lt;code&gt;publickey&lt;/code&gt; 两个文件，其中密钥是配置到本机的，而公钥是配置到其它机器里的。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat privatekey &amp;amp;&amp;amp; cat publickey&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;6TpHfNWc2H2NuM6ajQMMLkUWTgCf3xlwTTCiayz7Jmo&lt;/span&gt;=&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;kUWTgCf3xlwTTCiayz7Jmo6TpHfNWc2H2NuM6ajQMML&lt;/span&gt;=&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;假如现在有一台需要与上述主机对等联网的 &lt;em&gt;主机B&lt;/em&gt;，其公网IP（或者内网IP，只要能与上述主机通信即可）是 172.17.3.1，我们首先依照上面的流程安装 WireGuard 并生成好主机B的密钥。&lt;/p&gt;&#xA;&lt;p&gt;然后编写 &lt;em&gt;主机A&lt;/em&gt; 完整的配置文件，以供 &lt;code&gt;wg-quick&lt;/code&gt; 使用，在主机A的 &lt;code&gt;/etc/wireguard/wg0.conf&lt;/code&gt; 中写入&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[Interface]&#xA;PrivateKey = 6TpHfNWc2H2NuM6ajQMMLkUWTgCf3xlwTTCiayz7Jmo=&#xA;Address = 10.0.0.1&#xA;ListenPort = 51820&#xA;&#xA;[Peer]&#xA;PublicKey = 主机B的publickey&#xA;EndPoint = 172.17.3.1:51820&#xA;AllowedIPs = 10.0.0.2/32&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;及其简单的配置了，一看就懂。Interface 小节是属于主机A（也就是本机）的配置，其中 &lt;code&gt;Address&lt;/code&gt; 是你给这台主机分配的虚拟IP，而 &lt;code&gt;ListenPort&lt;/code&gt; 是主机之间通讯使用的端口，是 &lt;em&gt;UDP&lt;/em&gt; 协议的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>nginx-proxy将证书应用到非HTTPS容器问题处理记录</title>
      <link>http://localhost:1313/linux/nginx-proxy%E5%B0%86%E8%AF%81%E4%B9%A6%E5%BA%94%E7%94%A8%E5%88%B0%E9%9D%9Ehttps%E5%AE%B9%E5%99%A8%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/linux/nginx-proxy%E5%B0%86%E8%AF%81%E4%B9%A6%E5%BA%94%E7%94%A8%E5%88%B0%E9%9D%9Ehttps%E5%AE%B9%E5%99%A8%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E8%AE%B0%E5%BD%95/</guid>
      <description>&lt;h2 id=&#34;问题描述&#34;&gt;问题描述&lt;/h2&gt;&#xA;&lt;p&gt;某台 ECS 实例之前就以 docker + nginx-proxy + letsencrypt-nginx-proxy-companion 的形式托管了数个 WEB 服务，但是因为前端挂了 CDN 的缘故，都没有做证书配置等操作。这次由于将另外一台服务器的 gitea 代码管理服务迁移过来，考虑到要提供 SSH 协议的代码克隆服务，故前端没有使用 CDN，而是通过 let&amp;rsquo;s encrypt 组件自动申请的证书来配置 HTTPS。&lt;/p&gt;&#xA;&lt;p&gt;然而在配置完整个环境并完成数据迁移后，gitea 是可以正常以 HTTPS 协议访问了，之前本就存在的服务却全都无法正常访问，浏览器不断跳转以至于警告并自动停止请求。查看了 nginx-proxy 的容器日志，发现请求并没有到达此处，于是就在想是不是 CDN 出了问题。在临时取消了 CDN 接入后，依旧不能正常访问，只不过错误形式由原有的循环跳转变成了连接不安全！&lt;/p&gt;&#xA;&lt;p&gt;看了具体错误信息，才发现在取消 CDN 接入后，本该是 HTTP 协议的请求，变成了使用 gitea 容器所用证书的 HTTPS 协议的加密请求。那么就要看看是不是配置错误了……&lt;/p&gt;&#xA;&lt;h2 id=&#34;探索发现&#34;&gt;探索发现&lt;/h2&gt;&#xA;&lt;p&gt;反复查看 nginx-proxy 与 letsencrypt-nginx-proxy-companion 的文档，也并没有发觉有使用方式上的问题，在创建 gitea 容器的时候，也只是依照文档说明指定了 &lt;code&gt;VIRTUAL_HOST&lt;/code&gt;  &lt;code&gt;VIRTUAL_PORT&lt;/code&gt;  &lt;code&gt;LETSENCRYPT_HOST&lt;/code&gt;  &lt;code&gt;LETSENCRYPT_EMAIL&lt;/code&gt; 这几个环境变量，并无再多设置。那么为何会有这种情况呢……&lt;/p&gt;&#xA;&lt;p&gt;是不是域名的问题？gitea 服务我绑定的域名是 &lt;code&gt;t.cn&lt;/code&gt; (privacy protected)，而其余服务都是该域名的二级域名，是否是该原因导致在 nginx 配置生成过程中，产生了错误的判断？&lt;/p&gt;&#xA;&lt;p&gt;终于……文档中出现了这段话 &lt;a href=&#34;https://github.com/jwilder/nginx-proxy#wildcard-certificates&#34;&gt;wildcard-certificates&lt;/a&gt;：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Wildcard certificates and keys should be named after the domain name with a .crt and .key extension. For example VIRTUAL_HOST=foo.bar.com would use cert name bar.com.crt and bar.com.key.&lt;/p&gt;</description>
    </item>
    <item>
      <title>阿里云卸载自带监控服务记录</title>
      <link>http://localhost:1313/linux/%E9%98%BF%E9%87%8C%E4%BA%91%E5%8D%B8%E8%BD%BD%E8%87%AA%E5%B8%A6%E7%9B%91%E6%8E%A7%E6%9C%8D%E5%8A%A1%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/linux/%E9%98%BF%E9%87%8C%E4%BA%91%E5%8D%B8%E8%BD%BD%E8%87%AA%E5%B8%A6%E7%9B%91%E6%8E%A7%E6%9C%8D%E5%8A%A1%E8%AE%B0%E5%BD%95/</guid>
      <description>&lt;h2 id=&#34;东拼西凑的脚本&#34;&gt;东拼西凑的脚本&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wget -qO- http://update.aegis.aliyun.com/download/uninstall.sh | bash&#xA;wget -qO- http://update.aegis.aliyun.com/download/quartz_uninstall.sh | bash&#xA;pkill aliyun-service&#xA;rm -fr /etc/init.d/agentwatch /usr/sbin/aliyun-service&#xA;rm -rf /usr/local/aegis*&#xA;iptables -I INPUT -s 140.205.201.0/28 -j DROP&#xA;iptables -I INPUT -s 140.205.201.16/29 -j DROP&#xA;iptables -I INPUT -s 140.205.201.32/28 -j DROP&#xA;iptables -I INPUT -s 140.205.225.192/29 -j DROP&#xA;iptables -I INPUT -s 140.205.225.200/30 -j DROP&#xA;iptables -I INPUT -s 140.205.225.184/29 -j DROP&#xA;iptables -I INPUT -s 140.205.225.183/32 -j DROP&#xA;iptables -I INPUT -s 140.205.225.206/32 -j DROP&#xA;iptables -I INPUT -s 140.205.225.205/32 -j DROP&#xA;iptables -I INPUT -s 140.205.225.195/32 -j DROP&#xA;iptables -I INPUT -s 140.205.225.204/32 -j DROP&#xA;/usr/local/cloudmonitor/wrapper/bin/cloudmonitor.sh remove &amp;amp;&amp;amp; \&#xA;rm -rf /usr/local/cloudmonitor&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>ARCH安装Plasma桌面环境及美化记录</title>
      <link>http://localhost:1313/linux/arch%E5%AE%89%E8%A3%85plasma%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83%E5%8F%8A%E7%BE%8E%E5%8C%96%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/linux/arch%E5%AE%89%E8%A3%85plasma%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83%E5%8F%8A%E7%BE%8E%E5%8C%96%E8%AE%B0%E5%BD%95/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/static/images/2018-07-25-screenshot.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;安装-kde-环境&#34;&gt;安装 KDE 环境&lt;/h2&gt;&#xA;&lt;p&gt;终端下执行 &lt;code&gt;sudo pacman -S plasma-meta&lt;/code&gt; 命令以最小化安装 KDE 环境，然后还有官方推荐的 SDDM 显示管理器，执行 &lt;code&gt;sudo pacman -S sddm&lt;/code&gt; ，然后加入开机启动项中 &lt;code&gt;sudo systemctl enable sddm&lt;/code&gt; ，接着重启电脑即可看到登录窗口了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;系统设置&#34;&gt;系统设置&lt;/h2&gt;&#xA;&lt;h3 id=&#34;工作空间主题&#34;&gt;工作空间主题&lt;/h3&gt;&#xA;&lt;p&gt;通过 &lt;code&gt;系统设置&lt;/code&gt; 中 &lt;code&gt;工作空间主题&lt;/code&gt; 子项对桌面环境进行美化。&lt;/p&gt;&#xA;&lt;p&gt;首先， &lt;code&gt;观感&lt;/code&gt; 中我选择使用 &lt;code&gt;微风&lt;/code&gt; ；然后， &lt;code&gt;桌面主题&lt;/code&gt; 里通过内置的 &lt;code&gt;获得新主题&lt;/code&gt; 按钮在线下载安装桌面主题 &lt;code&gt;Breeze Transparent Dark&lt;/code&gt; 并启用它；在 &lt;code&gt;光标主题&lt;/code&gt; 中使用工作空间主题相同的 &lt;code&gt;微风&lt;/code&gt; 系列光标主题；最后，在 &lt;code&gt;欢迎屏幕&lt;/code&gt; 中同样使用获得新主题按钮在线安装 &lt;code&gt;Arc Dark&lt;/code&gt; 主题并启用。&lt;/p&gt;&#xA;&lt;p&gt;到这里就可以获得一个稍微好看的桌面环境了，不过还不够。&lt;/p&gt;&#xA;&lt;h3 id=&#34;颜色&#34;&gt;颜色&lt;/h3&gt;&#xA;&lt;p&gt;这个设置项所设置的颜色，就是系统 UI 框架的各个组件所使用的颜色。我多次调整后，最终选择了 &lt;code&gt;Zion&lt;/code&gt; ，同样可以通过界面中的 &lt;code&gt;获取新方案&lt;/code&gt; 按钮在线安装。&lt;/p&gt;&#xA;&lt;h3 id=&#34;图标&#34;&gt;图标&lt;/h3&gt;&#xA;&lt;p&gt;图标的选择，翻来翻去我最后选择了 MacOS 的图标，哈哈哈，不得不说 KDE 真好用，还是可以在线安装，直接搜 macos 然后选择一个匹配的即可。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ARCH安装指北</title>
      <link>http://localhost:1313/linux/arch%E5%AE%89%E8%A3%85%E6%8C%87%E5%8C%97/</link>
      <pubDate>Wed, 13 Jun 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/linux/arch%E5%AE%89%E8%A3%85%E6%8C%87%E5%8C%97/</guid>
      <description>&lt;h2 id=&#34;制作安装盘&#34;&gt;制作安装盘&lt;/h2&gt;&#xA;&lt;p&gt;首先去 ARCH 官网 &lt;a href=&#34;https://www.archlinux.org/download/&#34;&gt;下载&lt;/a&gt; 最新版本的 ISO 镜像文件。&lt;/p&gt;&#xA;&lt;p&gt;下载好后，使用启动盘制作工具制作U盘启动盘，制作工具推荐 &lt;a href=&#34;https://rufus.ie&#34;&gt;rufus&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;设置安装环境&#34;&gt;设置安装环境&lt;/h2&gt;&#xA;&lt;p&gt;开机选择 U盘 进行引导，大部分情况下即可正常进入到命令行模式的安装环境了。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;ARCH 安装环境并没有图形界面，因为安装非常简单。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;安装需要联网下载系统依赖包，我这里使用 WIFI 进行联网。&lt;/p&gt;&#xA;&lt;p&gt;在终端执行 &lt;code&gt;wifi-menu&lt;/code&gt; 进入简单的图形界面，选择要连接的 WIFI 名称，点击回车后输入密码，稍等片刻即可连接成功。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;可以使用 &lt;code&gt;ping -c4 www.baidu.com&lt;/code&gt; 确定联网是否成功。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;联网成功后，执行 &lt;code&gt;pacman -Syy&lt;/code&gt; 同步包管理数据，然后执行 &lt;code&gt;pacman -S reflector&lt;/code&gt; 安装用于筛选软件源的工具。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;reflector -c CN -l &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt; --sort=rate -p https --save /etc/pacman.d/mirrorlist&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述命令用于测试并挑选出下载速率最快的、所属中国区并使用 HTTPS 协议的三个源，并将其写入配置文件中。&#xA;如此一来，就不会因为下载速度而影响安装速度了。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;注意，由于 ARCH 的软件更新非常频繁，各大镜像节点速度的限制，安装时有可能出现找不到软件包的 404 报错，稍候再试即可。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;硬盘分区&#34;&gt;硬盘分区&lt;/h2&gt;&#xA;&lt;p&gt;首先需要查看系统分区信息&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lsblk&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出的内容类似于&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT&#xA;sda           8:0    0 931.5G  0 disk&#xA;└─sda1        8:1    0 931.5G  0 part&#xA;nvme0n1     259:0    0 953.9G  0 disk&#xA;├─nvme0n1p1 259:1    0   565M  0 part&#xA;├─nvme0n1p2 259:2    0 100.6G  0 part&#xA;├─nvme0n1p3 259:3    0   101G  0 part&#xA;├─nvme0n1p4 259:4    0 750.9G  0 part&#xA;└─nvme0n1p5 259:5    0  1003M  0 part&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我系统的分区如上， &lt;code&gt;nvme0n1p1&lt;/code&gt; 是 &lt;code&gt;UEFI&lt;/code&gt; 分区， &lt;code&gt;nvme0n1p2&lt;/code&gt; 是 WIN10 所在分区， &lt;code&gt;nvme0n1p3&lt;/code&gt; 将用于安装 ARCH， &lt;code&gt;nvme0n1p4&lt;/code&gt; 用于存储数据。&lt;/p&gt;</description>
    </item>
    <item>
      <title>深度Linux下SS智能分流</title>
      <link>http://localhost:1313/linux/%E6%B7%B1%E5%BA%A6linux%E4%B8%8Bss%E6%99%BA%E8%83%BD%E5%88%86%E6%B5%81/</link>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/linux/%E6%B7%B1%E5%BA%A6linux%E4%B8%8Bss%E6%99%BA%E8%83%BD%E5%88%86%E6%B5%81/</guid>
      <description>&lt;h2 id=&#34;起因&#34;&gt;起因&lt;/h2&gt;&#xA;&lt;p&gt;今天在使用 &lt;code&gt;dep&lt;/code&gt; 包管理器接管以前写的一个 Go 语言项目时，突然报错无法下载某个包。仔细检查后，无奈的宣布系统设置的全局代理没起作用。&lt;/p&gt;&#xA;&lt;h2 id=&#34;处理&#34;&gt;处理&lt;/h2&gt;&#xA;&lt;p&gt;查了资料，发现可以用 &lt;code&gt;ss-redir&lt;/code&gt; + &lt;code&gt;iptables&lt;/code&gt; + &lt;code&gt;chnroute&lt;/code&gt; 来做智能分流。&lt;/p&gt;&#xA;&lt;p&gt;首先，我需要从 &lt;code&gt;shadowsocks-libev&lt;/code&gt; 中取得 &lt;code&gt;ss-redir&lt;/code&gt; 程序，在终端中执行&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install shadowsocks-libev&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;即可取得我想要的程序，其所在目录为 &lt;code&gt;/usr/bin/ss-redir&lt;/code&gt; 。&lt;/p&gt;&#xA;&lt;p&gt;然后，我需要获取所有属于中国的 IP 地址，这个可以从 apnic 网站获得，经搜索后找到如下命令&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget -qO- http://ftp.apnic.net/stats/apnic/delegated-apnic-latest | awk -F &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;/CN/&amp;amp;&amp;amp;/ipv4/ {print $4 &amp;#34;/&amp;#34; 32-log($5)/log(2)}&amp;#39;&lt;/span&gt; | cat &amp;gt; chnroutes.txt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;经过过滤处理后的路由列表存放于当前目录，名为 &lt;code&gt;chnroutes.txt&lt;/code&gt; 的文本文件。&lt;/p&gt;&#xA;&lt;p&gt;最后，我只需想办法将该路由表导入到 iptables 中，然后将符合规则的数据包转发到 ss-redir 提供的透明代理地址即可。&lt;/p&gt;&#xA;&lt;p&gt;经过搜索，我发现可以使用 &lt;code&gt;ipset&lt;/code&gt; 程序来完成这一操作，使用下述命令创建路由集&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ipset -N chnroute hash:net maxelem &lt;span style=&#34;color:#b452cd&#34;&gt;65536&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后循环将之前路由表中取得的路由添加进去&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; ip in &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;$(&lt;/span&gt;cat chnroutes.txt&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;)&lt;/span&gt;; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ipset add chnroute &lt;span style=&#34;color:#00688b&#34;&gt;$ip&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#658b00&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;added &lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;$ip&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;done&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后创建 iptables 规则&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
